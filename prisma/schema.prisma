generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?   @db.Text
  creatorVerified Boolean   @default(false)
  description     String?   @db.Text
  role            Role      @default(USER)
  accounts        Account[]
  Creator         Creator[]
  Item            Item[]
  Tip             Tip[]
  sessions        session[]
}

model Creator {
  id             String    @id @default(cuid())
  nickName       String?
  realName       String?
  description    String?   @db.Text
  profilePicture String?   @default("https://static.vecteezy.com/system/resources/previews/002/596/484/non_2x/default-avatar-photo-placeholder-profile-image-female-vector.jpg")
  country        String?
  origin         String?
  age            Int?
  instagram      String?
  facebook       String?
  twitter        String?
  tiktok         String?
  youtube        String?
  website        String?
  onlyfans       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  creatorId      String    @unique
  Auction        Auction[]
  creator        User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId], map: "Creator_creatorId_fkey")
}

model Auction {
  id              String   @id @default(cuid())
  title           String
  description     String?  @db.Text
  image           String?  @db.Text
  minTip          Float    @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  startAt         DateTime @default(now())
  endAt           DateTime
  live            Boolean  @default(false)
  totalTipsAmount Float    @default(0)
  totalTips       Int      @default(0)
  Creator         Creator  @relation(fields: [creatorId], references: [id])
  creatorId       String
  item            Item?    @relation(fields: [itemId], references: [id], onDelete: SetNull)
  itemId          String?  @default("item deleted")
  bids            Tip[]

  @@index([creatorId], map: "Auction_creatorId_fkey")
  @@index([itemId], map: "Auction_itemId_fkey")
}

model Tip {
  id            String   @id @default(cuid())
  amount        Float
  name          String?
  email         String
  nickname      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  auctionId     String?
  message       String?
  paymentMethod String?
  auction       Auction? @relation(fields: [auctionId], references: [id], onDelete: SetNull)
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([auctionId], map: "Tip_auctionId_fkey")
  @@index([userId], map: "Tip_userId_fkey")
}

model Item {
  id                String              @id @default(cuid())
  name              String
  image             String?
  category          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  creatorId         String
  description       String?             @db.Text
  type              String?
  zustellung        String?
  Auction           Auction[]
  creator           User                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  ItemSensitiveData ItemSensitiveData[]

  @@index([creatorId], map: "Item_creatorId_fkey")
}

model ItemSensitiveData {
  id       String  @id @default(cuid())
  link     String?
  userName String?
  password String?
  itemId   String
  item     Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId], map: "ItemSensitiveData_itemId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  CREATOR
  USER
}
